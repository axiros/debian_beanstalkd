From 93ab93451d9355be7bd46fc27d9d521f2287376a Mon Sep 17 00:00:00 2001
From: Bart Schuurmans <bart@minnozz.com>
Date: Sun, 4 Oct 2015 14:07:58 +0200
Subject: [PATCH] fix log compaction with a log over 2GB

There was a 32-bit integer overflow calculating the
ratio of used to wasted log space. For a log over 2GB,
checking the ratio would always conclude it was under
the acceptable threshold, and compaction would never
run. Now we record the log size and compute the ratio in
64 bits.

Fixes #276
Closes #278
---
 dat.h  | 4 ++--
 walg.c | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/dat.h b/dat.h
index 2570e76..36093fc 100644
--- a/dat.h
+++ b/dat.h
@@ -327,8 +327,8 @@ struct Wal {
     File   *tail;
     int    nfile;
     int    next;
-    int    resv;  // bytes reserved
-    int    alive; // bytes in use
+    int64  resv;  // bytes reserved
+    int64  alive; // bytes in use
     int64  nmig;  // migrations
     int64  nrec;  // records written ever
     int    wantsync;
diff --git a/walg.c b/walg.c
index 7481136..2a8ddd0 100644
--- a/walg.c
+++ b/walg.c
@@ -91,10 +91,10 @@ usenext(Wal *w)
 static int
 ratio(Wal *w)
 {
-    int n, d;
+    int64 n, d;
 
     d = w->alive + w->resv;
-    n = w->nfile*w->filesize - d;
+    n = (int64)w->nfile * (int64)w->filesize - d;
     if (!d) return 0;
     return n / d;
 }
-- 
2.7.0.rc3

